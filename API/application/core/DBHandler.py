
##############################################################################
# Context manager for connecting/disconnecting to a database.
##############################################################################

import mysql.connector


class DBHandler:

    config=""
    conn = ""
    cursor=""

    def __init__(self, configuration:dict):
        """Add the database configuration parameters to the object.

        This class expects a single dictionary argument which needs to assign the
        appropriate values to (at least) the following keys:

            host - the IP address of the host running MySQL/MariaDB.
            user - the MySQL/MariaDB username to use.
            password - the user's password.
            database - the name of the database to use.

        For more options, refer to the mysql-connector-python documentation.
        """
        self.config = configuration

    def __enter__(self) -> 'cursor':
        """Connect to database and create a DB cursor.

        Return the database cursor to the context manager.
        """
        self.conn = mysql.connector.connect(**self.config)
        self.cursor = self.conn.cursor(dictionary=True)
        return self.cursor

    def __exit__(self, exc_type, exc_value, exc_traceback):
        """Destroy the cursor as well as the connection (after committing).

        Ignore any exceptions generated by the context managed code (for now).
        """
        self.cursor.close()
        self.conn.commit()
        self.conn.close()


    def query(self, sql:str, params=None, multiple=True):
        try:
            self.conn = mysql.connector.connect(**self.config)
            self.cursor = self.conn.cursor(dictionary=True)
            self.cursor.execute(sql, params)

            rows = self.cursor.fetchall() if multiple is True else self.cursor.fetchone()

            self.cursor.close()
            self.conn.commit()
            self.conn.close()

            return rows
        except mysql.connector.Error as err:
            print("Something went wrong: {}".format(err))


    def select(self, table, selected_columns:tuple=None, params:dict=None, multiple=True):
        try:
            self.conn = mysql.connector.connect(**self.config)
            self.cursor = self.conn.cursor(dictionary=True)

            selected_column_names = ", ".join(str(column) for column in selected_columns)
            columns= ", ".join("%("+ key + ")s" for key, value in params.items())
            sql = ("SELECT "+ selected_column_names +" FROM "+ table + " WHERE "+ columns + ";")

            self.cursor.execute(sql, params)

            rows = self.cursor.fetchall() if multiple is True else self.cursor.fetchone()

            self.cursor.close()
            self.conn.commit()
            self.conn.close()

            return rows
        except mysql.connector.Error as err:
            print("Something went wrong: {}".format(err))


    def insert(self, table, params:dict):
        try:
            self.conn = mysql.connector.connect(**self.config)
            self.cursor = self.conn.cursor(dictionary=True)
            columns= ", ".join("%("+ key + ")s" for key, value in params.items())
            column_names= ", ".join(key for key, value in params.items())
            sql = ("INSERT INTO "+ table + " (" + column_names + ") VALUES (" + columns +");")
            self.cursor.execute(sql, params)
            id = self.cursor.lastrowid

            self.cursor.close()
            self.conn.commit()
            self.conn.close()

            return id
        except mysql.connector.Error as err:
            print("Something went wrong: {}".format(err))


    def update(self, table, params:dict):
        try:
            self.conn = mysql.connector.connect(**self.config)
            self.cursor = self.conn.cursor(dictionary=True)
            columns= ", ".join(key + "= %(" + key +")s" for key, value in params.items())

            sql = ("UPDATE "+ table + " SET "+ columns + ";")
            self.cursor.execute(sql, params)
            id = self.cursor.lastrowid

            self.cursor.close()
            self.conn.commit()
            self.conn.close()

            return id
        except mysql.connector.Error as err:
            print("Something went wrong: {}".format(err))


    def is_existing(self, table, conditions:dict):
        try:
            self.conn = mysql.connector.connect(**self.config)
            self.cursor = self.conn.cursor(dictionary=True)
            columns= ", ".join(key + "= %(" + key +")s" for key, value in conditions.items())

            sql = ("SELECT 1 FROM "+ table + " WHERE "+ columns + ";")
            self.cursor.execute(sql, conditions)

            existing = self.cursor.fetchone()

            self.cursor.close()
            self.conn.commit()
            self.conn.close()

            return existing is not None

        except mysql.connector.Error as err:
            print("Something went wrong: {}".format(err))